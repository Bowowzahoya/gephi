import pandas as pd
from .constants import *

def get_cluster_info(exported_nodes, edges):
    columns = [INSIDE_WEIGHT_COL, OUTSIDE_WEIGHT_COL, 
               MEAN_INTERNAL_SIMILARITY_COL, 
               MIN_CLUSTER_SIZE_COL, MAX_CLUSTER_SIZE_COL])

    clusters = pd.DataFrame(columns=columns, sizes = exported_nodes[EXPORTED_SIZE_COL])
    groupby = exported_nodes.groupby(CLUSTER_COL)
    
    clusters[MEAN_INTERNAL_SIMILARITY_COL] = groupby.apply(_get_weighted_mean, EXPORTED_INTERNAL_SIMILARITY_COL)
    
    for cluster in clusters.index:
        print(cluster)
        ids_in_cluster = exported_nodes.loc[exported_nodes[CLUSTER_COL] == cluster].index
        ids_out_cluster = exported_nodes.loc[exported_nodes[CLUSTER_COL] != cluster].index
        nodes_in_cluster = exported_nodes.loc[ids_in_cluster]
        edges_in_cluster = edges.loc[edges[SOURCE_COL].isin(ids_in_cluster.to_list()) & edges[TARGET_COL].isin(ids_in_cluster.to_list())]
        
        nodes_out_cluster = exported_nodes.loc[ids_out_cluster]
        edges_out_cluster = edges.loc[edges[SOURCE_COL].isin(ids_in_cluster.to_list()) & edges[TARGET_COL].isin(ids_out_cluster.to_list())]
        
        clusters.loc[cluster, [MIN_CLUSTER_SIZE_COL, MAX_CLUSTER_SIZE_COL]] = \
            _get_sizes(clusters, edges_in_cluster, nodes_in_cluster)
        
        print(edges_in_cluster)
        inside_weights = _get_weighted_mean_weights(nodes_in_cluster, edges_in_cluster, sizes)
        print(inside_weights)
        outside_weights = _get_weighted_mean_weights(nodes_in_cluster, edges_out_cluster, sizes)
        print(outside_weights)
        cluster.loc[cluster, INSIDE_WEIGHT_COL] = (inside_weights*sizes[inside_weights.index]).sum()/sizes[inside_weights.index].sum()
        cluster.loc[cluster, OUTSIDE_WEIGHT_COL] = (outside_weights*sizes[outside_weights.index]).sum()/sizes[outside_weights.index].sum()
        1/0
        
    return clusters




def _get_sizes(clusters, edges_in_cluster, nodes_in_cluster):
    sizes_of_overlap = _get_overlap_from_weights(edges_in_cluster, nodes_in_cluster[EXPORTED_SIZE_COL])
        
    return max(nodes_in_cluster[EXPORTED_SIZE_COL].sum()-sizes_of_overlap.sum(), 
                                                      nodes_in_cluster[EXPORTED_SIZE_COL].max()), \
        nodes_in_cluster[EXPORTED_SIZE_COL].sum()-sizes_of_overlap.max() 
    
    return clusters
    

def _get_weighted_mean(nodes, column_name, size_col=EXPORTED_SIZE_COL):
    return (nodes[size_col]*nodes[column_name]).sum()/nodes[size_col].sum()

def _get_overlap_from_weights(edges, sizes, skip_one=True):
    if skip_one:
        edges.loc[edges[WEIGHT_COL] == 1, WEIGHT_COL] = 0
        
    overlap = pd.Series(index=edges.index)
    for source in sizes.index:
        mask = edges[SOURCE_COL] == source
        overlap.loc[mask] = edges.loc[mask, WEIGHT_COL]*sizes.loc[source]
    return overlap

def _get_weighted_mean_weights(nodes, edges, sizes, skip_one=True, col=TARGET_COL):
    weights = pd.Series(index=nodes.index)
    for node in nodes.index:
        node_edges = edges.loc[edges[SOURCE_COL] == node]
        weights[node] = _get_weighted_mean_weight(node_edges, sizes, 
                                                  skip_one=skip_one, col=col)
    return weights
        
    

def _get_weighted_mean_weight(one_node_edges, sizes, 
                              skip_one=True, col=TARGET_COL):
    if skip_one:
        one_node_edges.loc[one_node_edges[WEIGHT_COL] == 1, WEIGHT_COL] = 0
    one_node_edges = one_node_edges.set_index(col)
    
    overlap_index = [i for i in one_node_edges.index if i in sizes.index]
    
    return (one_node_edges.loc[overlap_index, WEIGHT_COL]*sizes.loc[overlap_index]).sum()/sizes.loc[overlap_index].sum()


    
    